//This file is automatically generated. DO NOT EDIT!
using System;
using RobotRaconteur;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 0108

namespace experimental.create2
{
public class SensorPacket
{
    public byte ID;
    public byte[] Data;
}

[RobotRaconteurServiceObjectInterface()]
public interface Create
{
    int DistanceTraveled { get; set; }
    int AngleTraveled { get; set; }
    byte Bumpers { get; set; }
    void Drive(short velocity, short radius);
    void StartStreaming();
    void StopStreaming();
    event Action Bump;
    Callback<Func<int,int,byte[]>> play_callback {get; set;}
    Wire<SensorPacket> packets{ get; set; }
}

public static class experimental__create2Constants 
{
    public static class Create
    {
    public const short DRIVE_STRAIGHT=32767;
    public const short SPIN_CLOCKWISE=-1;
    public const short SPIN_COUNTERCLOCKWISE=1;
    }
}
}
namespace experimental.create2
{
public class experimental__create2Factory : ServiceFactory
{
    public override string DefString()
{
    const string s="\n#Service to provide sample interface to the iRobot Create\nservice experimental.create2\n\noption version 0.9\n\nstruct SensorPacket\nfield uint8 ID\nfield uint8[] Data\nend\n\nobject Create\nconstant int16 DRIVE_STRAIGHT 32767\nconstant int16 SPIN_CLOCKWISE -1\nconstant int16 SPIN_COUNTERCLOCKWISE 1\n\nfunction void Drive(int16 velocity, int16 radius)\n\nfunction void StartStreaming()\nfunction void StopStreaming()\n\nproperty int32 DistanceTraveled [readonly]\nproperty int32 AngleTraveled [readonly]\nproperty uint8 Bumpers [readonly]\n\nevent Bump()\n\nwire SensorPacket packets [readonly]\n\ncallback uint8[] play_callback(int32 DistanceTraveled, int32 AngleTraveled)\nend\n\n";
    return s;
    }
    public override string GetServiceName() {return "experimental.create2";}
    public SensorPacket_stub SensorPacket_stubentry;
    public experimental__create2Factory()
{
    SensorPacket_stubentry=new SensorPacket_stub(this);
    }
    public override IStructureStub FindStructureStub(string objecttype)
    {
    if (objecttype=="SensorPacket")    return SensorPacket_stubentry;
    throw new DataTypeException("Cannot find appropriate structure stub");
    }
    public override IPodStub FindPodStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override INamedArrayStub FindNamedArrayStub(string objecttype)
    {
    throw new DataTypeException("Cannot find appropriate pod stub");
    }
    public override ServiceStub CreateStub(WrappedServiceStub innerstub) {
    string objecttype=innerstub.RR_objecttype.GetServiceDefinition().Name + "." + innerstub.RR_objecttype.Name;    string objshort;
    if (CompareNamespace(objecttype, out objshort)) {
    switch (objshort) {
    case "Create":
    return new Create_stub(innerstub);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objecttype).Item1;
    return RobotRaconteurNode.s.GetServiceType(ext_service_type).CreateStub(innerstub);
    }
    throw new ServiceException("Could not create stub");
    }
    public override ServiceSkel CreateSkel(object obj) {
    string objtype = RobotRaconteurNode.GetTypeString(ServiceSkelUtil.FindParentInterface(obj.GetType()));
    string objshort;
    if (CompareNamespace(objtype, out objshort)) {
    switch(objshort) {
    case "Create":
    return new Create_skel((Create)obj);
    default:
    break;
    }
    } else {
    string ext_service_type=RobotRaconteurNode.SplitQualifiedName(objtype).Item1;
    return RobotRaconteurNode.s.GetServiceFactory(ext_service_type).CreateSkel(obj);
    }
    throw new ServiceException("Could not create skel");
    }
    public override RobotRaconteurException DownCastException(RobotRaconteurException rr_exp){
    if (rr_exp==null) return rr_exp;
    string rr_type=rr_exp.Error;
    if (!rr_type.Contains(".")) return rr_exp;
    string rr_stype;
    if (CompareNamespace(rr_type, out rr_stype)) {
    } else {
    return RobotRaconteurNode.s.DownCastException(rr_exp); 
    }
    return rr_exp;
    }
}

public class SensorPacket_stub : IStructureStub {
    public SensorPacket_stub(experimental__create2Factory d) {def=d;}
    private experimental__create2Factory def;
    public MessageElementStructure PackStructure(object s1) {
    using(vectorptr_messageelement m=new vectorptr_messageelement())
    {
    if (s1 ==null) return null;
    SensorPacket s = (SensorPacket)s1;
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackScalar<byte>("ID",s.ID));
    MessageElementUtil.AddMessageElementDispose(m,MessageElementUtil.PackArray<byte>("Data",s.Data));
    return new MessageElementStructure("experimental.create2.SensorPacket",m);
    }
    }
    public T UnpackStructure<T>(MessageElementStructure m) {
    if (m == null ) return default(T);
    SensorPacket s=new SensorPacket();
    using(vectorptr_messageelement mm=m.Elements)
    {
    s.ID =(MessageElementUtil.UnpackScalar<byte>(MessageElement.FindElement(mm,"ID")));
    s.Data =MessageElementUtil.UnpackArray<byte>(MessageElement.FindElement(mm,"Data"));
    T st; try {st=(T)((object)s);} catch (InvalidCastException) {throw new DataTypeMismatchException("Wrong structuretype");}
    return st;
    }
    }
}

public interface async_Create
{
    Task<int> async_get_DistanceTraveled(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_DistanceTraveled(int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<int> async_get_AngleTraveled(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_AngleTraveled(int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task<byte> async_get_Bumpers(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_set_Bumpers(byte value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_Drive(short velocity, short radius,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_StartStreaming(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
    Task async_StopStreaming(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE);
}
public class Create_stub : ServiceStub , Create, async_Create{
    private CallbackClient<Func<int,int,byte[]>> rr_play_callback;
    private Wire<SensorPacket> rr_packets;
    public Create_stub(WrappedServiceStub innerstub) : base(innerstub) {
    rr_play_callback=new CallbackClient<Func<int,int,byte[]>>("play_callback");
    rr_packets=new Wire<SensorPacket>(innerstub.GetWire("packets"));
    }
    public int DistanceTraveled {
    get {
    return (MessageElementUtil.UnpackScalar<int>(rr_innerstub.PropertyGet("DistanceTraveled")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<int>("value",value))
    {
    rr_innerstub.PropertySet("DistanceTraveled", m);
    }
    }
    }
    public int AngleTraveled {
    get {
    return (MessageElementUtil.UnpackScalar<int>(rr_innerstub.PropertyGet("AngleTraveled")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<int>("value",value))
    {
    rr_innerstub.PropertySet("AngleTraveled", m);
    }
    }
    }
    public byte Bumpers {
    get {
    return (MessageElementUtil.UnpackScalar<byte>(rr_innerstub.PropertyGet("Bumpers")));
    }
    set {
    using(MessageElement m=MessageElementUtil.PackScalar<byte>("value",value))
    {
    rr_innerstub.PropertySet("Bumpers", m);
    }
    }
    }
    public void Drive(short velocity, short radius) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<short>("velocity",velocity));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<short>("radius",radius));
    using(MessageElement rr_me=rr_innerstub.FunctionCall("Drive",rr_param))
    {
    }
    }
    }
    public void StartStreaming() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("StartStreaming",rr_param))
    {
    }
    }
    }
    public void StopStreaming() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(MessageElement rr_me=rr_innerstub.FunctionCall("StopStreaming",rr_param))
    {
    }
    }
    }
    public event Action Bump;
    public override void DispatchEvent(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    case "Bump":
    {
    if (Bump != null) { 
    Bump();
    }
    return;
    }
    default:
    break;
    }
    }
    public Callback<Func<int,int,byte[]>> play_callback {
    get { return rr_play_callback;  }
    set { throw new InvalidOperationException();}
    }
    public Wire<SensorPacket> packets {
    get { return rr_packets;  }
    set { throw new InvalidOperationException();}
    }
    public override MessageElement CallbackCall(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    case "play_callback":
    {
    int DistanceTraveled=(MessageElementUtil.UnpackScalar<int>(vectorptr_messageelement_util.FindElement(rr_m,"DistanceTraveled")));
    int AngleTraveled=(MessageElementUtil.UnpackScalar<int>(vectorptr_messageelement_util.FindElement(rr_m,"AngleTraveled")));
    byte[] ret=play_callback.Function(DistanceTraveled, AngleTraveled);
    return MessageElementUtil.PackArray<byte>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public virtual async Task<int> async_get_DistanceTraveled(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("DistanceTraveled",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<int>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_DistanceTraveled(int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<int>("value",value))
    {
    await rr_async_PropertySet("DistanceTraveled",mm,rr_timeout);
    }
    }
    public virtual async Task<int> async_get_AngleTraveled(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("AngleTraveled",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<int>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_AngleTraveled(int value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<int>("value",value))
    {
    await rr_async_PropertySet("AngleTraveled",mm,rr_timeout);
    }
    }
    public virtual async Task<byte> async_get_Bumpers(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(var rr_value = await rr_async_PropertyGet("Bumpers",rr_timeout)) {
    var rr_ret=(MessageElementUtil.UnpackScalar<byte>(rr_value));
    return rr_ret;
    } }
    public virtual async Task async_set_Bumpers(byte value, int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(MessageElement mm=MessageElementUtil.PackScalar<byte>("value",value))
    {
    await rr_async_PropertySet("Bumpers",mm,rr_timeout);
    }
    }
    public virtual async Task async_Drive(short velocity, short radius,int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<short>("velocity",velocity));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<short>("radius",radius));
    using(var rr_return = await rr_async_FunctionCall("Drive",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_StartStreaming(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("StartStreaming",rr_param,rr_timeout)) {
    } } }
    public virtual async Task async_StopStreaming(int rr_timeout=RobotRaconteurNode.RR_TIMEOUT_INFINITE)
    {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    using(var rr_return = await rr_async_FunctionCall("StopStreaming",rr_param,rr_timeout)) {
    } } }
}
public class Create_skel : ServiceSkel {
    protected Create obj;
    public Create_skel(object o) : base(o) { obj=(Create)o; }
    public override void ReleaseCastObject() { 
    obj=null;
    base.ReleaseCastObject();
    }
    public override MessageElement CallGetProperty(string membername) {
    switch (membername) {
    case "DistanceTraveled":
    {
    int ret=obj.DistanceTraveled;
    return MessageElementUtil.PackScalar<int>("return",ret);
    }
    case "AngleTraveled":
    {
    int ret=obj.AngleTraveled;
    return MessageElementUtil.PackScalar<int>("return",ret);
    }
    case "Bumpers":
    {
    byte ret=obj.Bumpers;
    return MessageElementUtil.PackScalar<byte>("return",ret);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void CallSetProperty(string membername, MessageElement m) {
    switch (membername) {
    case "DistanceTraveled":
    {
    obj.DistanceTraveled=(MessageElementUtil.UnpackScalar<int>(m));
    return;
    }
    case "AngleTraveled":
    {
    obj.AngleTraveled=(MessageElementUtil.UnpackScalar<int>(m));
    return;
    }
    case "Bumpers":
    {
    obj.Bumpers=(MessageElementUtil.UnpackScalar<byte>(m));
    return;
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override MessageElement CallFunction(string rr_membername, vectorptr_messageelement rr_m) {
    switch (rr_membername) {
    case "Drive":
    {
    short velocity=(MessageElementUtil.UnpackScalar<short>(vectorptr_messageelement_util.FindElement(rr_m,"velocity")));
    short radius=(MessageElementUtil.UnpackScalar<short>(vectorptr_messageelement_util.FindElement(rr_m,"radius")));
    this.obj.Drive(velocity, radius);
    return new MessageElement("return",(int)0);
    }
    case "StartStreaming":
    {
    this.obj.StartStreaming();
    return new MessageElement("return",(int)0);
    }
    case "StopStreaming":
    {
    this.obj.StopStreaming();
    return new MessageElement("return",(int)0);
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override object GetSubObj(string name, string ind) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("");
    }
    public override void RegisterEvents(object rrobj1) {
    obj=(Create)rrobj1;
    obj.Bump+=rr_Bump;
    }
    public override void UnregisterEvents(object rrobj1) {
    obj=(Create)rrobj1;
    obj.Bump-=rr_Bump;
    }
    public void rr_Bump() {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement()) {
    this.innerskel.WrappedDispatchEvent("Bump",rr_param);
    }
    }
    public override object GetCallbackFunction(uint rr_endpoint, string rr_membername) {
    switch (rr_membername) {
    case "play_callback": {
    return new Func<int,int,byte[]>( delegate(int DistanceTraveled, int AngleTraveled) {
    using(vectorptr_messageelement rr_param=new vectorptr_messageelement())
    {
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("DistanceTraveled",DistanceTraveled));
    MessageElementUtil.AddMessageElementDispose(rr_param,MessageElementUtil.PackScalar<int>("AngleTraveled",AngleTraveled));
    using(MessageElement rr_me=this.innerskel.WrappedCallbackCall("play_callback",rr_endpoint,rr_param))
    {
    return MessageElementUtil.UnpackArray<byte>(rr_me);
    }
    }
    });
    }
    default:
    break;
    }
    throw new MemberNotFoundException("Member not found");
    }
    public override void InitPipeServers(object rrobj1) {
    obj=(Create)rrobj1;
    }
    public override void InitCallbackServers(object rrobj1) {
    obj=(Create)rrobj1;
    obj.play_callback=new CallbackServer<Func<int,int,byte[]>>("play_callback",this);
    }
    public override void InitWireServers(object rrobj1) {
    obj=(Create)rrobj1;
    obj.packets=new Wire<SensorPacket>(innerskel.GetWire("packets"));
    }
    public override WrappedArrayMemoryDirector GetArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedMultiDimArrayMemoryDirector GetMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodArrayMemoryDirector GetPodArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedPodMultiDimArrayMemoryDirector GetPodMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedArrayMemoryDirector GetNamedArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override WrappedNamedMultiDimArrayMemoryDirector GetNamedMultiDimArrayMemory(string name) {
    switch (name) {
    default:
    break;
    }
    throw new MemberNotFoundException("Member Not Found");
    }
    public override string RRType { get { return "experimental.create2.Create"; } }
}
public class Create_default_impl : Create{
    protected Callback<Func<int,int,byte[]>> rrvar_play_callback;
    protected WireBroadcaster<SensorPacket> rrvar_packets;
    public virtual int DistanceTraveled {get; set;} = default(int);
    public virtual int AngleTraveled {get; set;} = default(int);
    public virtual byte Bumpers {get; set;} = default(byte);
    public virtual void Drive(short velocity, short radius) {
    throw new NotImplementedException();    }
    public virtual void StartStreaming() {
    throw new NotImplementedException();    }
    public virtual void StopStreaming() {
    throw new NotImplementedException();    }
    public event Action Bump;
    public virtual Callback<Func<int,int,byte[]>> play_callback {
    get { return rrvar_play_callback;  }
    set {
    if (rrvar_play_callback!=null) throw new InvalidOperationException("Callback already set");
    rrvar_play_callback= value;
    }
    }
    public virtual Wire<SensorPacket> packets {
    get { return rrvar_packets.Wire;  }
    set {
    if (rrvar_packets!=null) throw new InvalidOperationException("Pipe already set");
    rrvar_packets= new WireBroadcaster<SensorPacket>(value);
    }
    }
}
public static class RRExtensions{
}
}
